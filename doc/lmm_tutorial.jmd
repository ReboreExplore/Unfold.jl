---
title: "Overlap Correction with Linear Mixed Models (aka unmixed.jl)"
author: "Benedikt Ehinger with help from Dave Kleinschmidt"
date: 2020-02-17
---

```julia;label=packages;
using StatsModels, MixedModels, DataFrames
import Plots
import unfold
include("../test/test_utilities.jl") # to load the simulated data
```

This notebook is similar to the `lm_tutorial`, but fits mass-univariate *mixed* models and time-expanded/overlap-corrected *mixed* models.

## Reading input
The data were simulated in MatLab using the `unmixed toolbox (www.unfoldtoolbox.org)` with the function`EEG_to_csv.m`.

**Limitation**: due to current implementation in MixedModels.jl, we cannot fit overlap-corrected random effects.
That is, the `(1|item)` cannot be modelled at the moment.

```julia
data, evts = loadtestdata("testcase3","../test/")
data = data.+ 0.1*randn(size(data)) # we have to add minimal noise, else mixed models crashes.

categorical!(evts,:subject);
```
The `events` dataFrame looks like this
```julia
first(evts,6)
```
With the important fields being `latency`, `condA`, `condB` and `subject`.

The data are a vector.
```julia
println(typeof(data))
println(size(data))
```
**Limitation** Note how small it is! Only 12k samples, that is only ~5minutes of recording in total for 25 subjects. More realistic samples quickly take hours to fit.

## Without Overlap Correction
We define the formula
```julia
f  = @formula 0~1+condA*condB+(1+condA*condB|subject);
```

epoch the data for the mass-univariate mixed model case
```julia
data_r = reshape(data,(1,:))
# cut the data into epochs
data_epochs,times = unfold.epoch(data=data_r,tbl=evts,τ=(-0.4,0.8),sfreq=50);
# missing or partially missing epochs are currenlty _only_ supported for non-mixed models!
evts,data_epochs = unfold.dropMissingEpochs(evts,data_epochs)
```

We can now run the LinearMixedModel on each time point
```julia
m = fit(UnfoldLinearMixedModel,f,evts,data_epochs,times)
```

### Fixed Effects
```julia
results = m.results[m.results.group.=="fixed",:]
Plots.plot(results.time,results.estimate,
        group=results.term,
        layout=1,legend=:outerbottom)
```
We see the condition effects and some residual overlap activity in the fixed effects

### Random Effects
And the random effect results
```julia
results = m.results[m.results.group.=="subject",:]
Plots.plot(results.time,results.estimate,
        group=results.term,
        layout=1,legend=:outerbottom)

```
The random effects are very high in areas where we simulated overlap. (i.e. <-0.1 and >0.2)

## With Overlap Correction
For overlap correction, we have to use a basis function once again.

```julia
basisfunction = firbasis(τ=(-0.05,.4),sfreq=40)
f  = @formula 0~1+condA*condB+(1+condA*condB|subject);
```

**Limitation:** Currently we cannot model correlation between time-points or random slopes.

**Limitation:** See the low sampling frequency? This is because the modelfit increases quadratically with the number of predictors

We can now run the mixed model.

Easy syntax: Specify formula, events, EEG-data & the basis function
```julia
@time mm = fit(UnfoldLinearMixedModel,f,evts,data,basisfunction)
```
We receive an object containing the (very large) mixed model:
```julia
show(coeftable(mm.model))
```

But again, we also get a *tidy*-dataframe with the results
```julia
first(mm.results,6)
```

and thus we can easily plot the fixed effect results.
```julia
results = mm.results[mm.results.group.=="fixed",:]
Plots.plot(results.time,results.estimate,
        group=results.term,
        layout=1,legend=:outerbottom)
```

And the random effect results.
```julia
results = mm.results[mm.results.group.=="subject",:]
Plots.plot(results.time,results.estimate,
        group=results.term,
        layout=1,legend=:outerbottom)

```


## What is happening under the hood?
```julia
Xdc = designmatrix(UnfoldLinearMixedModel,f,evts,basisfunction)
```

Formula-Terms are wrapped with a `TimeExpandedTerm`, which upon calling `modelcols` will timeexpand the designmatrix.
There is one TimeExpandedTerm for the FixedEffects and one for each RandomEffectsTerm.

 **Limitation** Currently it is not possible to combine different formulas & different basis-functions, but that is planned
```julia
typeof(Xdc.formulas.rhs)
```

Visualizing the designmatrices.
Fixed Effects:
```julia
Plots.heatmap(Matrix(Xdc.Xs[1][1:300,:]))
```

Random Effects
```julia
Plots.heatmap(Matrix(Xdc.Xs[2][1:2000,1:500]))
```


And finally, generate the linear mixed model manually & fit it.
```julia;eval=false
mf = unfoldfit(unfold.UnfoldLinearMixedModel,Xs,data)
mm = condense_long(mf)
mm
```

## Summary
There are four different model types currently "fitable"

1. Timeexpansion **No**, Mixed **No**  : `fit(UnfoldLinearModel,f,evts,data_epoch,times)`
1. Timeexpansion **Yes**, Mixed **No** : `fit(UnfoldLinearModel,f,evts,data,basisfunction)`
1. Timeexpansion **No**, Mixed **Yes** : `fit(UnfoldLinearMixedModel,f,evts,data_epoch,times)`
1. Timeexpansion **Yes**, Mixed **Yes**: `fit(UnfoldLinearMixedModel,f,evts,data,basisfunction)`


```julia;eval=false;echo=false
using Weave

# convert to html
weave("doc/lmm_tutorial.jmd","doc/html/lmm_tutorial.html")

# convert to a python notebook
convert_doc("doc/lmm_tutorial.jmd", "doc/ipynb/lmm_tutorial.ipynb")

# convert to md for README
#weave("doc\\lm_tutorial.jmd", doctype="pandoc", out_path = "README.md")
```
